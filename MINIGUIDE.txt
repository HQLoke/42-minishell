[UPDATED 21 March 2022]
Core process:
1: Error cases to check:
		Unclosed single and double quotes
		Backslash special characters
		Single semicolon
		Redirection errors (no infile, no outfile)
		Empty pipeline, start or end with pipeline
2: Split input based on '|' into pipeline string
3: Split each pipeline string based on '[empty]' into pipeline linked list
4: Trim single and double quotes
5: Expand environment variables

   Notes:
   If I remove single/double quotes first, I wouldn't know env var which to expand.
   If I expand first, I might remove single/double quotes in the content of env var.
   The solution:
   First loop, while removing quotes, if encountered a $, set type to 0 (not expand). 
   Or type to 1 (expand) & get the content of env var. Set everything is a linked list.
   Second loop, for each $, use the linked list to check and edit the string.
   (Updated 8 April: This is WRONG!)
6: Separate command plus arguments from input/output redirections

   Notes:
   There's a difference between bash and zsh. Use bash.
   Bash uses the last input or output redirection. Zsh processes one by one.
   For example: command < infile1 << infile2 < infile3 > outfile1 >> outfile2 > outfile3
   Bash takes input from infile3 only. Ignore read end of previous pipe and intermediate inputs.
   Sends output to outfile3 only. Ignore write end of next pipe. New file for intermediate outputs.
7: Execute the command.
   Builtin vs Not Builtin
   PATH vs Relative vs Absolute

Non-core process:
1: Builtin
2: Environment
3: History
4: Signal

Memory management:
1: At EXIT_FAILURE, free everything.
2: After successful execution, free pipeline_head at process_line
							   free redirect, cmd_args, path at parse_line
							   free env_head, pwd at main

6 April 2022:
Follow this process flow: lexer > parser > executor
1: Know the limitations of each data structure and decide when to use suitable one.
   For example:
   If I use linked list, it is easier to add environment variables. But I have to
   convert into array everything I use execve.
   If I use array, it is more difficult to add environment variables due to realloc.
   But I don't have to convert into array everytime.
2: Should not make my code return malloced strings no matter success or failure. 
   Makes my code less reusable and more memory to free.
   For example in the getenv function, return a pointer to the value instead if
   successful, else return NULL.
3: Instead of storing split information like env_var and value, I can use functions
   like del/get/put to retrieve information. Then I don't need to combine env_var
   and value again everytime I run execve.
4: It's not a memory leak if it's still reachable. Don't have to religiously free
   everything.
5: DRY principle: Before coding, identify if there are similarities between the
   problems and try to extract that portion out as a function.

17 April 2022: 9:30pm to 12:52am 
1st evaluation session by Wee Hean
1: Github collaboration (using fork, fetch, raise issues)
2: Signal control+/ doesn't do nothing (probably due to me removing two lines)
3: equal sign crash in export
4: unset doesn't remove env var
5: after unsetting PATH, execve will crash coz no NULL check
6: execve increment wrong place
7: cat heredoc in multiple processes
8: history file survives the minishell exit
9: ft_putendl_fd instead of ft_putstr newline everytime
10: ft_strcmp instead of ft_strncmp, remove the n
11: if variable name is too long, create a temporary function to copy